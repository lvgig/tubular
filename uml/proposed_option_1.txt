@startuml tubular
namespace tubular {
  namespace base {}
  namespace pandas {
    namespace df_method {}
    namespace two_column_df_method {}
    namespace series_dt_method {}
    namespace series_str_method {}
  }
  namespace create {
    namespace difference {
      namespace dates {}
    }
    namespace compare {
      namespace equality {}
      namespace between_dates {}
    }
    namespace combine {
      namespace str_concatenate {}
    }
    namespace extract {
      namespace dtinfo {}
    }

    namespace interaction {}
  }

  namespace transform {
    namespace discretise {
      namespace cut {}
    }
    namespace map {
      namespace map {}
      namespace cross_column {}
    }
    namespace impute {
      namespace impute {}
      namespace median {}
      namespace mean {}
      namespace mode {}
      namespace nearest_mean_response {}
    }
    namespace encode {
      namespace encode {}
      namespace rare {}
      namespace mean_response {}
      namespace ordinal {}
      namespace one_hot {}
    }
    namespace remove_outliers {
      namespace cap {}
    }
    namespace cyclical {
      namespace sinusoid {}
    }
    namespace numeric{
      namespace log {}
      namespace scaling {}
      namespace pca {}
    }
    namespace set {
      namespace dtype {}
      namespace to_datetime {}
      namespace value {}
    }

  }
}
class tubular.base.BaseTransformer {
  verbose: None
  columns: None
  columns: None
  columns: None
  copy: None
}
class tubular.pandas.df_method.DataFrameMethodTransformer {
  new_column_name: None
  pd_method_name: None
  pd_method_kwargs: None
  drop_original: None
}

class tubular.transform.remove_outliers.cap.CappingTransformer {
  capping_values: None
  capping_values: None
  quantiles: None
  weights_column: None
  _replacement_values: None
}
class tubular.transform.remove_outliers.cap.OutOfRangeNullTransformer {
}
class tubular.create.compare.equality.EqualityChecker {
  new_col_name: str
  drop_original: bool
}
class tubular.create.compare.between_dates.BetweenDatesTransformer {
  new_column_name: None
  lower_inclusive: None
  upper_inclusive: None
  column_lower: None
  column_upper: None
  column_between: None
}
class tubular.create.difference.dates.DateDiffLeapYearTransformer {
  new_column_name: None
  drop_cols: None
  missing_replacement: None
  column_lower: None
  column_upper: None
}
class tubular.create.difference.dates.DateDifferenceTransformer {
  units: None
  new_column_name: None
  new_column_name: None
  column_lower: None
  column_upper: None
}
class tubular.create.extract.dtinfo.DatetimeInfoExtractor {
  include: None
  datetime_mappings: None
  mappings_provided: None
  timeofday_mapping: None
  timeofday_mapping: None
  timeofmonth_mapping: None
  timeofmonth_mapping: None
  timeofyear_mapping: None
  timeofyear_mapping: None
  dayofweek_mapping: None
  dayofweek_mapping: None
}
class tubular.transform.cyclical.sinusoid.DatetimeSinusoidCalculator {
  method: None
  units: Union[str, dict]
  period: Union[int, float, dict, dict]
}
class tubular.pandas.series_dt_method.SeriesDtMethodTransformer {
  new_column_name: None
  pd_method_name: None
  pd_method_kwargs: None
  _callable: None
  _callable: None
  column: None
}
class tubular.transform.set.to_datetime.ToDatetimeTransformer {
  to_datetime_kwargs: None
  new_column_name: None
  column: None
}
class tubular.transform.impute.arbitrary.ArbitraryImputer {
  impute_values_: None
  impute_value: None
}
class tubular.transform.impute.impute.BaseImputer {
}
class tubular.transform.impute.mean.MeanImputer {
  weight: None
}
class tubular.transform.impute.median.MedianImputer {
  weight: None
}
class tubular.transform.impute.mode.ModeImputer {
  weight: None
}
class tubular.transform.impute.nearest_mean_response.NearestMeanResponseImputer {
}
class tubular.transform.impute.impute.NullIndicator {
}
class tubular.transform.map.map.BaseMappingTransformMixin {
}
class tubular.transform.map.map.BaseMappingTransformer {
  mappings: None
}
class tubular.transform.map.cross_column.CrossColumnAddTransformer {
  adjust_column: None
}
class tubular.transform.map.cross_column.CrossColumnMappingTransformer {
  adjust_column: None
}
class tubular.transform.map.cross_column.CrossColumnMultiplyTransformer {
  adjust_column: None
}
class tubular.transform.map.map.MappingTransformer {
}
class tubular.transform.set.dtype.SetColumnDtype {
  dtype: None
}
class tubular.transform.set.value.SetValueTransformer {
  value: None
}
class tubular.transform.encode.encode.BaseNominalTransformer {
}
class tubular.transform.encode.rare.GroupRareLevelsTransformer {
  cut_off_percent: None
  weight: None
  rare_level_name: None
  record_rare_levels: None
}
class tubular.transform.encode.mean_response.MeanResponseTransformer {
  weights_column: None
  prior: None
  level: None
  unseen_level_handling: None
}
class tubular.transform.encode.encode.NominalToIntegerTransformer {
  start_encoding: None
}
class tubular.transform.encode.one_hot.OneHotEncodingTransformer {
  _parameter_constraints: dict {static}
  separator: None
  drop_original: None
}
class tubular.transform.encode.ordinal.OrdinalEncoderTransformer {
  weights_column: None
}
class tubular.transform.discretise.cut.CutTransformer {
  cut_kwargs: None
  new_column_name: None
  column: None
}
class tubular.create.interaction.InteractionTransformer {
  min_degree: None
  max_degree: None
  max_degree: None
  max_degree: None
  nb_features_to_interact: None
  nb_combinations: None
  interaction_colname: None
  nb_feature_out: None
}
class tubular.transform.numeric.log.LogTransformer {
  base: None
  add_1: None
  drop: None
  suffix: None
}
class tubular.transform.numeric.pca.PCATransformer {
  n_components: None
  n_components: None
  n_components: None
  svd_solver: None
  random_state: None
  pca_column_prefix: None
  pca: None
  pca_column_prefix: None
  feature_names_out: None
  n_components_: None
}
class tubular.transform.numeric.scaling.ScalingTransformer {
  scaler: None
  scaler: None
  scaler: None
  scaler_kwargs: None
  scaler_type: None
}
class tubular.pandas.two_column_df_method.TwoColumnOperatorTransformer {
  column1_name: None
  column2_name: None
}
class tubular.pandas.series_str_method.SeriesStrMethodTransformer {
  new_column_name: None
  pd_method_name: None
  pd_method_kwargs: None
}
class tubular.create.combine.str_concatenate.StringConcatenator {
  new_column: None
  separator: None
}
tubular.base.BaseTransformer <|-- tubular.pandas.df_method.DataFrameMethodTransformer
tubular.base.BaseTransformer <|-- tubular.transform.remove_outliers.cap.CappingTransformer
tubular.transform.remove_outliers.cap.CappingTransformer <|-- tubular.transform.remove_outliers.cap.OutOfRangeNullTransformer
tubular.base.BaseTransformer <|-- tubular.create.compare.equality.EqualityChecker
tubular.base.BaseTransformer <|-- tubular.create.compare.between_dates.BetweenDatesTransformer
tubular.base.BaseTransformer <|-- tubular.create.difference.dates.DateDiffLeapYearTransformer
tubular.base.BaseTransformer <|-- tubular.create.difference.dates.DateDifferenceTransformer
tubular.base.BaseTransformer <|-- tubular.create.extract.dtinfo.DatetimeInfoExtractor
tubular.base.BaseTransformer <|-- tubular.transform.cyclical.sinusoid.DatetimeSinusoidCalculator
tubular.base.BaseTransformer <|-- tubular.pandas.series_dt_method.SeriesDtMethodTransformer
tubular.base.BaseTransformer <|-- tubular.transform.set.dtype.to_dattime.ToDatetimeTransformer
tubular.base.BaseTransformer <|-- tubular.transform.impute.impute.BaseImputer
tubular.transform.impute.impute.BaseImputer <|-- tubular.transform.impute.arbitrary.ArbitraryImputer
tubular.transform.impute.impute.BaseImputer <|-- tubular.transform.impute.mean.MeanImputer 
tubular.transform.impute.impute.BaseImputer <|-- tubular.transform.impute.median.MedianImputer
tubular.transform.impute.impute.BaseImputer <|-- tubular.transform.impute.mode.ModeImputer
tubular.transform.impute.impute.BaseImputer <|-- tubular.transform.impute.nearest_mean_response.NearestMeanResponseImputer
tubular.base.BaseTransformer <|-- tubular.transform.impute.impute.NullIndicator
tubular.base.BaseTransformer <|-- tubular.transform.map.map.BaseMappingTransformMixin
tubular.base.BaseTransformer <|-- tubular.transform.map.map.BaseMappingTransformer
tubular.transform.map.map.BaseMappingTransformer <|-- tubular.transform.map.cross_column.CrossColumnAddTransformer
tubular.transform.map.map.BaseMappingTransformer <|-- tubular.transform.map.cross_column.CrossColumnMappingTransformer
tubular.transform.map.map.BaseMappingTransformer <|-- tubular.transform.map.cross_column.CrossColumnMultiplyTransformer
tubular.transform.map.map.BaseMappingTransformer <|-- tubular.transform.map.map.MappingTransformer
tubular.transform.map.map.BaseMappingTransformMixin <|-- tubular.transform.map.map.MappingTransformer
tubular.base.BaseTransformer <|-- tubular.transform.set.dtype.SetColumnDtype
tubular.base.BaseTransformer <|-- tubular.transform.set.value.SetValueTransformer 
tubular.base.BaseTransformer <|-- tubular.transform.encode.encode.BaseNominalTransformer 
tubular.transform.encode.encode.BaseNominalTransformer <|-- tubular.transform.encode.rare.GroupRareLevelsTransformer
tubular.transform.encode.encode.BaseNominalTransformer <|-- tubular.transform.encode.mean_response.MeanResponseTransformer
tubular.transform.map.map.BaseMappingTransformMixin <|-- tubular.transform.encode.mean_response.MeanResponseTransformer
tubular.transform.encode.encode.BaseNominalTransformer  <|-- tubular.transform.encode.encode.NominalToIntegerTransformer
tubular.transform.map.map.BaseMappingTransformMixin <|-- tubular.transform.encode.encode.NominalToIntegerTransformer
tubular.transform.encode.encode.BaseNominalTransformer  <|-- tubular.transform.encode.one_hot.OneHotEncodingTransformer
tubular.transform.encode.encode.BaseNominalTransformer  <|-- tubular.transform.encode.ordinal.OrdinalEncoderTransformer 
tubular.transform.map.map.BaseMappingTransformMixin <|-- tubular.transform.encode.ordinal.OrdinalEncoderTransformer 
tubular.base.BaseTransformer <|-- tubular.transform.discretise.cut.CutTransformer 
tubular.base.BaseTransformer <|-- tubular.create.interaction.InteractionTransformer
tubular.base.BaseTransformer <|-- tubular.transform.numeric.log.LogTransformer
tubular.base.BaseTransformer <|-- tubular.transform.numeric.pca.PCATransformer
tubular.base.BaseTransformer <|-- tubular.transform.numeric.scaling.ScalingTransformer
tubular.pandas.df_method.DataFrameMethodTransformer <|-- tubular.pandas.two_column_df_method.TwoColumnOperatorTransformer
tubular.base.BaseTransformer <|-- tubular.pandas.series_str_method.SeriesStrMethodTransformer
tubular.base.BaseTransformer <|-- tubular.create.combine.str_concatenate.StringConcatenator

@enduml